        -:    0:Source:MST_strategy.cpp
        -:    1:#include "MST_strategy.hpp"
        -:    2:#include <stdexcept>
        -:    3:#include <string>
        -:    4:
        -:    5:// Prim's Algorithm
        1:    6:MST MST_strategy::prim(const std::vector<std::vector<int>>& _adj_matrix, int n) {
        -:    7:
        -:    8:   // std::cout << "starting calculating mst prim"<<_adj_matrix[0][1]<<"\n";
        1:    9:    std::vector<bool> inMST(n, false);           // Track nodes included in the MST
        1:   10:    std::vector<int> key(n, std::numeric_limits<int>::max()); // Minimum weights to include each vertex
        1:   11:    std::vector<int> parent(n, -1);             // To store the MST structure
        1:   12:    key[0] = 0;                                 // Start from node 0
        1:   13:    int totalWeight = 0;
        -:   14:
        4:   15:    for (int count = 0; count < n; ++count) {
        -:   16:        // Find the vertex with the smallest key value not yet in MST
        3:   17:        int minKey = std::numeric_limits<int>::max();
        3:   18:        int u = -1;
       12:   19:        for (int i = 0; i < n; ++i) {
        9:   20:            if (!inMST[i] && key[i] < minKey) {
        3:   21:                minKey = key[i];
        3:   22:                u = i;
        -:   23:            }
        -:   24:        }
        -:   25:
        3:   26:        if (u == -1) {
    #####:   27:            throw std::runtime_error("Graph is disconnected; MST cannot be created");
        -:   28:        }
        -:   29:
        -:   30:        // Add the selected vertex to the MST
        3:   31:        inMST[u] = true;
        3:   32:        totalWeight += key[u];
        -:   33:
        -:   34:        // Update key values for adjacent vertices
       12:   35:        for (int v = 0; v < n; ++v) {
        9:   36:            if (v == u) continue; // Skip self-loops
        6:   37:            int weight = _adj_matrix[u][v];
        6:   38:            if (weight != NO_EDGE && !inMST[v] && weight < key[v]) {
        2:   39:                key[v] = weight;
        2:   40:                parent[v] = u;
        -:   41:            }
        -:   42:        }
        -:   43:    }
        -:   44:
        -:   45:    // Build the MST adjacency matrix
        1:   46:    std::vector<std::vector<int>> mstAdjMatrix(n, std::vector<int>(n, NO_EDGE));
        3:   47:    for (int i = 1; i < n; ++i) {
        2:   48:        if (parent[i] != -1) {
        2:   49:            mstAdjMatrix[i][parent[i]] = _adj_matrix[i][parent[i]];
        2:   50:            mstAdjMatrix[parent[i]][i] = _adj_matrix[parent[i]][i];
        -:   51:        }
        -:   52:    }
        -:   53:    //std::cout << "finish calculating mst prim"<<"\n";
        -:   54:
        -:   55:
        2:   56:    return MST(mstAdjMatrix, "Prim");
        1:   57:}
        -:   58:
        -:   59:// Kruskal's Algorithm
        1:   60:MST MST_strategy::kruskal(const std::vector<std::vector<int>>& _adj_matrix, int n) {
        1:   61:    std::vector<std::tuple<int, int, int>> edges; // (weight, u, v)
        -:   62:
        -:   63:    // Extract all edges from the adjacency matrix
        4:   64:    for (int u = 0; u < n; ++u) {
        6:   65:        for (int v = u + 1; v < n; ++v) { // Avoid duplicate edges for undirected graph
        3:   66:            int weight = _adj_matrix[u][v];
        3:   67:            if (weight != NO_EDGE && u != v) { // Skip NO_EDGE and self-loops
        2:   68:                edges.emplace_back(weight, u, v);
        -:   69:            }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:    // Sort edges by weight in non-decreasing order
        1:   74:    std::sort(edges.begin(), edges.end());
        -:   75:
        1:   76:    UnionFind uf(n);                           // Union-Find structure for cycle detection
        1:   77:    std::vector<std::vector<int>> mstAdjMatrix(n, std::vector<int>(n, NO_EDGE));
        1:   78:    int totalWeight = 0;
        -:   79:
        3:   80:    for (const auto& [weight, u, v] : edges) {
        2:   81:        if (uf.find(u) != uf.find(v)) {       // If adding this edge doesn't form a cycle
        2:   82:            uf.unite(u, v);                   // Merge the two sets
        2:   83:            mstAdjMatrix[u][v] = weight;      // Add the edge to the MST
        2:   84:            mstAdjMatrix[v][u] = weight;      // Undirected graph
        2:   85:            totalWeight += weight;
        -:   86:        }
        -:   87:    }
        -:   88:
        2:   89:    return MST(mstAdjMatrix, "Kruskal");
        1:   90:}
